#!/usr/bin/env node

/**
 * Validation des coordonn√©es corrig√©es
 * V√©rifie que les nouvelles coordonn√©es sont plus pr√©cises et coh√©rentes
 */

const fs = require('fs');
const path = require('path');

class CoordinateValidator {
    constructor() {
        this.reportPath = path.join(__dirname, 'applied-fixes-report.json');
        this.parisBounds = {
            north: 48.902,
            south: 48.815,
            east: 2.469,
            west: 2.224
        };
    }

    /**
     * V√©rifie si des coordonn√©es sont dans Paris
     */
    isInParis(lat, lng) {
        return lat >= this.parisBounds.south && 
               lat <= this.parisBounds.north && 
               lng >= this.parisBounds.west && 
               lng <= this.parisBounds.east;
    }

    /**
     * Calcule la distance entre deux points GPS (en m√®tres)
     */
    calculateDistance(lat1, lng1, lat2, lng2) {
        const R = 6371000; // Rayon de la Terre en m√®tres
        const œÜ1 = lat1 * Math.PI / 180;
        const œÜ2 = lat2 * Math.PI / 180;
        const ŒîœÜ = (lat2 - lat1) * Math.PI / 180;
        const ŒîŒª = (lng2 - lng1) * Math.PI / 180;

        const a = Math.sin(ŒîœÜ/2) * Math.sin(ŒîœÜ/2) +
                  Math.cos(œÜ1) * Math.cos(œÜ2) *
                  Math.sin(ŒîŒª/2) * Math.sin(ŒîŒª/2);
        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));

        return R * c;
    }

    /**
     * D√©termine l'arrondissement approximatif selon les coordonn√©es
     */
    getApproximateArrondissement(lat, lng) {
        // Centres approximatifs des arrondissements
        const arrondissementCenters = {
            '1er': [48.8607, 2.3358],
            '7√®me': [48.8566, 2.3098],
            '8√®me': [48.8738, 2.3095],
            '17√®me': [48.8838, 2.3128]
        };

        let closest = null;
        let minDistance = Infinity;

        for (const [arr, [centerLat, centerLng]] of Object.entries(arrondissementCenters)) {
            const distance = this.calculateDistance(lat, lng, centerLat, centerLng);
            if (distance < minDistance) {
                minDistance = distance;
                closest = arr;
            }
        }

        return { arrondissement: closest, distance: Math.round(minDistance) };
    }

    /**
     * Valide une correction individuelle
     */
    validateFix(fix) {
        const validation = {
            place: fix.place,
            file: fix.file,
            valid: true,
            issues: [],
            improvements: [],
            confidence: fix.confidence
        };

        const [newLat, newLng] = fix.newCoordinates;
        const oldCoords = fix.oldCoordinates;

        // 1. V√©rifier que c'est dans Paris
        if (!this.isInParis(newLat, newLng)) {
            validation.valid = false;
            validation.issues.push('‚ùå Coordonn√©es hors de Paris');
        } else {
            validation.improvements.push('‚úÖ Coordonn√©es dans Paris');
        }

        // 2. Calculer le d√©placement
        if (oldCoords) {
            const [oldLat, oldLng] = oldCoords;
            const distance = this.calculateDistance(oldLat, oldLng, newLat, newLng);
            validation.displacement = Math.round(distance);

            if (distance > 2000) {
                validation.issues.push(`‚ö†Ô∏è Grande distance de correction: ${Math.round(distance)}m`);
            } else if (distance > 100) {
                validation.improvements.push(`üìè Correction significative: ${Math.round(distance)}m`);
            } else {
                validation.improvements.push(`üîß Correction mineure: ${Math.round(distance)}m`);
            }
        }

        // 3. Pr√©cision des coordonn√©es
        const precision = Math.max(
            newLat.toString().split('.')[1]?.length || 0,
            newLng.toString().split('.')[1]?.length || 0
        );

        if (precision >= 6) {
            validation.improvements.push('üéØ Haute pr√©cision (6+ d√©cimales)');
        } else if (precision >= 4) {
            validation.improvements.push('üìç Pr√©cision correcte (4+ d√©cimales)');
        } else {
            validation.issues.push('‚ö†Ô∏è Pr√©cision faible (<4 d√©cimales)');
        }

        // 4. Coh√©rence g√©ographique
        const location = this.getApproximateArrondissement(newLat, newLng);
        const expectedArr = fix.file.match(/(\d+)/)?.[1];
        
        if (expectedArr) {
            const expectedArrFormatted = expectedArr === '1' ? '1er' : expectedArr + '√®me';
            if (location.arrondissement === expectedArrFormatted) {
                validation.improvements.push(`üèõÔ∏è Coh√©rent avec ${expectedArrFormatted} arrondissement`);
            } else {
                validation.issues.push(`üìç Incoh√©rent: dans ${location.arrondissement}, attendu ${expectedArrFormatted}`);
            }
        }

        // 5. Confiance du g√©ocodage
        if (fix.confidence >= 0.7) {
            validation.improvements.push(`üåü Haute confiance (${(fix.confidence * 100).toFixed(0)}%)`);
        } else if (fix.confidence >= 0.4) {
            validation.improvements.push(`üëç Confiance correcte (${(fix.confidence * 100).toFixed(0)}%)`);
        } else {
            validation.issues.push(`‚ö†Ô∏è Faible confiance (${(fix.confidence * 100).toFixed(0)}%)`);
        }

        return validation;
    }

    /**
     * G√©n√®re des liens de v√©rification
     */
    generateVerificationLinks(fix) {
        const [lat, lng] = fix.newCoordinates;
        return {
            googleMaps: `https://www.google.com/maps?q=${lat},${lng}`,
            openStreetMap: `https://www.openstreetmap.org/?mlat=${lat}&mlon=${lng}&zoom=17`,
            coordinates: `[${lat.toFixed(6)}, ${lng.toFixed(6)}]`
        };
    }

    /**
     * Valide toutes les corrections
     */
    validateAllFixes() {
        console.log('üîç Validation des coordonn√©es corrig√©es\n');

        if (!fs.existsSync(this.reportPath)) {
            console.error(`‚ùå Rapport non trouv√©: ${this.reportPath}`);
            return;
        }

        const report = JSON.parse(fs.readFileSync(this.reportPath, 'utf8'));
        const fixes = report.applied_fixes;

        console.log(`üìä ${fixes.length} corrections √† valider\n`);

        const validations = [];
        let validCount = 0;
        let issuesCount = 0;

        for (const fix of fixes) {
            const validation = this.validateFix(fix);
            validations.push(validation);

            console.log(`üìç ${validation.place} (${validation.file})`);
            console.log(`   Source: ${fix.source}, Confiance: ${(fix.confidence * 100).toFixed(0)}%`);
            
            const links = this.generateVerificationLinks(fix);
            console.log(`   Coordonn√©es: ${links.coordinates}`);
            
            if (validation.displacement) {
                console.log(`   D√©placement: ${validation.displacement}m`);
            }

            // Afficher les am√©liorations
            validation.improvements.forEach(improvement => {
                console.log(`   ${improvement}`);
            });

            // Afficher les probl√®mes
            validation.issues.forEach(issue => {
                console.log(`   ${issue}`);
                issuesCount++;
            });

            console.log(`   üó∫Ô∏è  V√©rifier: ${links.googleMaps}`);
            console.log('');

            if (validation.valid) {
                validCount++;
            }
        }

        // R√©sum√© final
        console.log('üìä R√âSUM√â DE VALIDATION');
        console.log('='.repeat(50));
        console.log(`Total valid√©: ${fixes.length}`);
        console.log(`Corrections valides: ${validCount} (${Math.round(validCount/fixes.length*100)}%)`);
        console.log(`Corrections avec probl√®mes: ${fixes.length - validCount}`);
        console.log(`Total des probl√®mes d√©tect√©s: ${issuesCount}`);

        const avgConfidence = fixes.reduce((sum, fix) => sum + fix.confidence, 0) / fixes.length;
        console.log(`Confiance moyenne: ${(avgConfidence * 100).toFixed(1)}%`);

        const avgDisplacement = validations
            .filter(v => v.displacement)
            .reduce((sum, v) => sum + v.displacement, 0) / validations.filter(v => v.displacement).length;
        console.log(`D√©placement moyen: ${Math.round(avgDisplacement)}m`);

        // Sauvegarder le rapport de validation
        const validationReport = {
            timestamp: new Date().toISOString(),
            summary: {
                total_fixes: fixes.length,
                valid_fixes: validCount,
                issues_count: issuesCount,
                average_confidence: avgConfidence,
                average_displacement: avgDisplacement || 0
            },
            validations: validations
        };

        const validationReportPath = path.join(__dirname, 'validation-report.json');
        fs.writeFileSync(validationReportPath, JSON.stringify(validationReport, null, 2));
        console.log(`\nüìÑ Rapport de validation sauvegard√©: ${validationReportPath}`);

        // Recommandations
        console.log('\nüí° RECOMMANDATIONS:');
        console.log('-'.repeat(30));

        if (validCount === fixes.length) {
            console.log('üéâ Toutes les corrections sont valides !');
            console.log('üëç Vous pouvez utiliser ces coordonn√©es en confiance.');
        } else {
            console.log('‚ö†Ô∏è  Quelques corrections n√©cessitent une v√©rification manuelle.');
            console.log('üîç Consultez les liens Google Maps pour valider visuellement.');
        }

        if (avgConfidence < 0.5) {
            console.log('üìç Confiance moyenne faible - consid√©rez un g√©ocodage avec plus de sources.');
        }

        console.log('üåê Testez l\'application pour v√©rifier le rendu visuel sur la carte.');

        return validationReport;
    }
}

// CLI Usage
async function main() {
    const validator = new CoordinateValidator();
    
    try {
        const result = validator.validateAllFixes();
        console.log('\n‚úÖ Validation termin√©e');
    } catch (error) {
        console.error('‚ùå Erreur:', error.message);
        process.exit(1);
    }
}

// Ex√©cuter si appel√© directement
if (require.main === module) {
    main();
}

module.exports = CoordinateValidator;