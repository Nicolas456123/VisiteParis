#!/usr/bin/env python3
"""
Analyse des coordonn√©es dans les fichiers JSON des arrondissements de Paris.
Recherche les probl√®mes suivants :
1. Coordonn√©es dupliqu√©es (plusieurs lieux avec les m√™mes coordonn√©es)
2. Lieux sans coordonn√©es
3. Coordonn√©es hors de Paris
4. Coordonn√©es suspectes (0,0 ou valeurs aberrantes)
"""

import json
import os
import glob
from collections import defaultdict

# Limites approximatives de Paris
PARIS_BOUNDS = {
    'lat_min': 48.815,
    'lat_max': 48.902,
    'lon_min': 2.224,
    'lon_max': 2.469
}

def load_json_files(directory):
    """Charge tous les fichiers JSON du dossier."""
    files_data = {}
    pattern = os.path.join(directory, "*.json")
    
    for file_path in glob.glob(pattern):
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
                filename = os.path.basename(file_path)
                files_data[filename] = data
                print(f"‚úì Charg√©: {filename}")
        except Exception as e:
            print(f"‚úó Erreur lors du chargement de {file_path}: {e}")
    
    return files_data

def extract_all_coordinates(files_data):
    """Extrait toutes les coordonn√©es de tous les lieux."""
    all_places = []
    
    for filename, data in files_data.items():
        arrondissement = data.get('arrondissement', {})
        arr_id = arrondissement.get('id', filename)
        arr_center = arrondissement.get('center', [])
        
        categories = arrondissement.get('categories', {})
        
        for category_name, category_data in categories.items():
            places = category_data.get('places', [])
            
            for place in places:
                place_info = {
                    'file': filename,
                    'arrondissement_id': arr_id,
                    'arrondissement_center': arr_center,
                    'category': category_name,
                    'id': place.get('id', 'N/A'),
                    'name': place.get('name', 'N/A'),
                    'address': place.get('address', 'N/A'),
                    'coordinates': place.get('coordinates', [])
                }
                all_places.append(place_info)
    
    return all_places

def analyze_coordinates(places):
    """Analyse les coordonn√©es pour d√©tecter les probl√®mes."""
    
    # 1. Grouper par coordonn√©es pour trouver les doublons
    coords_to_places = defaultdict(list)
    places_without_coords = []
    places_outside_paris = []
    suspicious_coords = []
    
    for place in places:
        coords = place['coordinates']
        
        # V√©rifier si pas de coordonn√©es
        if not coords or len(coords) != 2:
            places_without_coords.append(place)
            continue
        
        lat, lon = coords
        
        # Coordonn√©es suspectes (0,0 ou valeurs aberrantes)
        if (lat == 0 and lon == 0) or abs(lat) > 90 or abs(lon) > 180:
            suspicious_coords.append(place)
        
        # Coordonn√©es hors de Paris
        if not (PARIS_BOUNDS['lat_min'] <= lat <= PARIS_BOUNDS['lat_max'] and 
                PARIS_BOUNDS['lon_min'] <= lon <= PARIS_BOUNDS['lon_max']):
            places_outside_paris.append(place)
        
        # Grouper par coordonn√©es
        coord_key = f"{lat:.6f},{lon:.6f}"
        coords_to_places[coord_key].append(place)
    
    # Identifier les coordonn√©es dupliqu√©es
    duplicate_coords = {coord: places_list for coord, places_list in coords_to_places.items() 
                       if len(places_list) > 1}
    
    return {
        'duplicate_coords': duplicate_coords,
        'places_without_coords': places_without_coords,
        'places_outside_paris': places_outside_paris,
        'suspicious_coords': suspicious_coords,
        'total_places': len(places)
    }

def check_center_coordinates(places, duplicate_coords):
    """V√©rifie si des lieux utilisent les coordonn√©es du centre de leur arrondissement."""
    center_duplicates = []
    
    for coord_str, places_list in duplicate_coords.items():
        if len(places_list) > 1:
            # V√©rifier si ces coordonn√©es correspondent au centre d'un arrondissement
            for place in places_list:
                arr_center = place['arrondissement_center']
                if arr_center and len(arr_center) == 2:
                    center_lat, center_lon = arr_center
                    coord_key = f"{center_lat:.6f},{center_lon:.6f}"
                    if coord_key == coord_str:
                        center_duplicates.append({
                            'coordinates': coord_str,
                            'arrondissement_center': arr_center,
                            'places': places_list
                        })
                        break
    
    return center_duplicates

def print_report(analysis_results, places):
    """Affiche le rapport d√©taill√©."""
    print("\n" + "="*80)
    print("RAPPORT D'ANALYSE DES COORDONN√âES - PARIS EXPLORER")
    print("="*80)
    
    total = analysis_results['total_places']
    print(f"\nüìä STATISTIQUES G√âN√âRALES")
    print(f"Total des lieux analys√©s: {total}")
    
    # 1. Coordonn√©es dupliqu√©es
    duplicates = analysis_results['duplicate_coords']
    print(f"\nüîç COORDONN√âES DUPLIQU√âES: {len(duplicates)} groupes trouv√©s")
    
    if duplicates:
        print("\nGroupes avec coordonn√©es identiques:")
        for coord, places_list in sorted(duplicates.items(), key=lambda x: len(x[1]), reverse=True):
            lat, lon = map(float, coord.split(','))
            print(f"\n  üìç Coordonn√©es [{lat:.6f}, {lon:.6f}] - {len(places_list)} lieux:")
            for place in places_list:
                print(f"    ‚Ä¢ {place['name']} ({place['arrondissement_id']}) - {place['category']}")
                print(f"      Fichier: {place['file']}")
    
    # 2. V√©rification des centres d'arrondissement
    center_duplicates = check_center_coordinates(places, duplicates)
    if center_duplicates:
        print(f"\n‚ö†Ô∏è  LIEUX UTILISANT LES COORDONN√âES DU CENTRE DE LEUR ARRONDISSEMENT:")
        for item in center_duplicates:
            coord_str = item['coordinates']
            center = item['arrondissement_center']
            places_list = item['places']
            print(f"\n  üéØ Centre d'arrondissement [{center[0]}, {center[1]}]:")
            for place in places_list:
                print(f"    ‚Ä¢ {place['name']} - {place['address']}")
                print(f"      Arrondissement: {place['arrondissement_id']} | Fichier: {place['file']}")
    
    # 3. Lieux sans coordonn√©es
    no_coords = analysis_results['places_without_coords']
    print(f"\n‚ùå LIEUX SANS COORDONN√âES: {len(no_coords)}")
    if no_coords:
        for place in no_coords:
            print(f"  ‚Ä¢ {place['name']} ({place['arrondissement_id']})")
            print(f"    Adresse: {place['address']}")
            print(f"    Fichier: {place['file']}")
    
    # 4. Coordonn√©es hors de Paris
    outside_paris = analysis_results['places_outside_paris']
    print(f"\nüåç LIEUX HORS DE PARIS: {len(outside_paris)}")
    if outside_paris:
        print(f"Limites Paris: Lat {PARIS_BOUNDS['lat_min']}-{PARIS_BOUNDS['lat_max']}, Lon {PARIS_BOUNDS['lon_min']}-{PARIS_BOUNDS['lon_max']}")
        for place in outside_paris:
            coords = place['coordinates']
            print(f"  ‚Ä¢ {place['name']} - [{coords[0]}, {coords[1]}]")
            print(f"    Arrondissement: {place['arrondissement_id']} | Fichier: {place['file']}")
    
    # 5. Coordonn√©es suspectes
    suspicious = analysis_results['suspicious_coords']
    print(f"\nüö® COORDONN√âES SUSPECTES: {len(suspicious)}")
    if suspicious:
        for place in suspicious:
            coords = place['coordinates']
            print(f"  ‚Ä¢ {place['name']} - [{coords[0]}, {coords[1]}]")
            print(f"    Arrondissement: {place['arrondissement_id']} | Fichier: {place['file']}")
    
    # Recherche sp√©cifique des lieux mentionn√©s
    print(f"\nüîç RECHERCHE SP√âCIFIQUE:")
    target_names = ["Square Marcel-Pagnol", "Madeleine", "√âglise de la Madeleine"]
    
    for place in places:
        for target in target_names:
            if target.lower() in place['name'].lower():
                coords = place['coordinates']
                center = place['arrondissement_center']
                is_same_as_center = (coords == center) if coords and center else False
                
                print(f"\n  üéØ Trouv√©: {place['name']}")
                print(f"    Coordonn√©es: {coords}")
                print(f"    Centre arrondissement: {center}")
                print(f"    M√™mes coordonn√©es que le centre: {'OUI ‚ö†Ô∏è' if is_same_as_center else 'NON ‚úì'}")
                print(f"    Fichier: {place['file']}")

def main():
    """Fonction principale."""
    data_dir = "data/arrondissements"
    
    if not os.path.exists(data_dir):
        print(f"‚ùå Dossier {data_dir} introuvable!")
        return
    
    print("üîç Chargement des fichiers JSON...")
    files_data = load_json_files(data_dir)
    
    if not files_data:
        print("‚ùå Aucun fichier JSON trouv√©!")
        return
    
    print(f"\nüìä {len(files_data)} fichiers charg√©s avec succ√®s")
    
    print("\nüîç Extraction des coordonn√©es...")
    all_places = extract_all_coordinates(files_data)
    
    print("\nüîç Analyse des coordonn√©es...")
    results = analyze_coordinates(all_places)
    
    print_report(results, all_places)

if __name__ == "__main__":
    main()